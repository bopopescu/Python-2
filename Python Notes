Python Notes for personal references

Python Indentation
- Python really care about indention. In other languages it is not necessary but just helps improve the readability.
    There are different types of indention errors
   1. "IndentationError: expected an indented block"
        These types of errors have multiple reasons ti have but it usually occurs because you have a You have a ":" without an indented block behind

More information about indentation issues can be found here https://stackoverflow.com/questions/39395226/indent-expected/39395307


String Methods
isalpha() returns True if the string consists only of letters and is not blank.

isalnum() returns True if the string consists only of letters and numbers and is not blank.

isdecimal() returns True if the string consists only of numeric characters and is not blank.

isspace() returns True if the string consists only of spaces, tabs, and new-lines and is not blank.

istitle() returns True if the string consists only of words that begin with an uppercase letter followed by only lowercase letters.

List of other methods can be found at https://docs.python.org/2.4/lib/string-methods.html








Object Identity
In Python, every object that is created is given a number that uniquely identifies it. It is guaranteed that no two objects will have the same identifier during any period in which their lifetimes overlap. Once an object’s reference count drops to zero and it is garbage collected, as happened to the 300 object above, then its identifying number becomes available and may be used again.

The built-in Python function id() returns an object’s integer identifier. Using the id() function, you can verify that two variables indeed point to the same object:

>>> n = 300
>>> m = n
>>> id(n)
60127840
>>> id(m)
60127840

>>> m = 400
>>> id(m)
60127872
After the assignment m = n, m and n both point to the same object, confirmed by the fact that id(m) and id(n) return the same number. Once m is reassigned to 400, m and n point to different objects with different identities.
https://realpython.com/python-variables/

Constructors
Constructors are generally used for instantiating an object.The task of constructors is to initialize(assign values) to the data members of the class when an object of class is created.
In Python the __init__() method is called the constructor and is always called when an object is created.

Types of constructors :

default constructor :The default constructor is simple constructor which doesn’t accept any arguments.
It’s definition has only one argument which is a reference to the instance being constructed.

parameterized constructor :constructor with parameters is known as parameterized constructor.
The parameterized constructor take its first argument as a reference to the instance being constructed known as self and the rest of the
arguments are provided by the programmer.





Python Casting
There may be times when you want to specify a type on to a variable. This can be done with casting. Python is an object-orientated language, and as such it uses classes to define data types, including its primitive types.

Casting in python is therefore done using constructor functions:

int() - constructs an integer number from an integer literal, a float literal (by rounding down to the previous whole number), or a string literal (providing the string represents a whole number)
float() - constructs a float number from an integer literal, a float literal or a string literal (providing the string represents a float or an integer)
str() - constructs a string from a wide variety of data types, including strings, integer literals and float literals



Logic Operators
== Compares objects based on there value
is Compare objects based on there ID value (See above section regarding object identity)
Other types of Logic Operators
<
>
<=
=>






Personal Note
- We need casting due to the fact that unlike other programming languages where we assign the variable a type upon declaring it, in python we do not.